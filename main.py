import os
import csv
import random
import sqlite3
import threading
from datetime import date
from pathlib import Path

from flask import Flask
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import (
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)

# ============== Flask –¥–ª—è Render (–ø–æ—Ä—Ç) ==============
app = Flask(__name__)

@app.get("/")
def health():
    return "Bot is running!"

def run_http():
    port = int(os.environ.get("PORT", 10000))
    app.run(host="0.0.0.0", port=port)

threading.Thread(target=run_http, daemon=True).start()
print("HTTP health server started")

# ============== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==============
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞")

CONSULT_WHATSAPP_URL = os.getenv("CONSULT_WHATSAPP_URL", "https://wa.me/77000000000")
CONSULT_IG_URL = os.getenv("CONSULT_IG_URL", "https://instagram.com/your_profile")

# –ò–º—è CSV –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø–æ–¥ —Ç–≤–æ–π —Ñ–∞–π–ª; –º–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è OILS_CSV_PATH
CSV_PATH = os.getenv("OILS_CSV_PATH", "aroma_oracle_pack.csv")
DB_PATH = os.getenv("DB_PATH", "aroma_bot.db")

# ============== –ü–æ–∏—Å–∫ CSV (–Ω–∞–¥—ë–∂–Ω—ã–π) ==============
def resolve_csv(path_str: str) -> str:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ CSV.
    –ü—Ä–æ–±—É–µ—Ç: –∫–∞–∫ —É–∫–∞–∑–∞–Ω, —Ä—è–¥–æ–º —Å main.py, —Ç–∏–ø–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–º—ë–Ω.
    """
    candidates = []
    p = Path(path_str)
    if p.is_file():
        candidates.append(p)

    base = Path(__file__).parent
    candidates += [
        base / path_str,
        base / "aroma_oracle_pack.csv",
        base / "aroma_oracle_pack_100.csv",
    ]

    for c in candidates:
        if c.is_file():
            return str(c.resolve())

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å, —á—Ç–æ–±—ã –≤ –ª–æ–≥–∞—Ö –±—ã–ª–æ –≤–∏–¥–Ω–æ, —á—Ç–æ –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º
    try:
        print("CWD:", os.getcwd())
        print("DIR:", os.listdir("."))
        print("BASE:", base, "BASE_DIR:", os.listdir(base))
    except Exception:
        pass
    raise FileNotFoundError(
        f"CSV not found. Set OILS_CSV_PATH to actual filename. Tried: {path_str}"
    )

# ============== –î–∞–Ω–Ω—ã–µ (CSV) ==============
# –û–∂–∏–¥–∞–µ–º—ã–µ –∫–æ–ª–æ–Ω–∫–∏: name, description, emotions, mantra (—Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)
OILS = []  # —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –ø–æ–ª—è–º–∏: id, name, description, emotions, mantra

def load_oils():
    global OILS
    OILS = []
    csv_file = resolve_csv(CSV_PATH)
    with open(csv_file, "r", encoding="utf-8") as f:
        reader = csv.DictReader(f)
        i = 0
        for row in reader:
            OILS.append({
                "id": i,
                "name": (row.get("name") or row.get("–ù–∞–∑–≤–∞–Ω–∏–µ") or "").strip(),
                "description": (row.get("description") or row.get("–û–ø–∏—Å–∞–Ω–∏–µ") or "").strip(),
                "emotions": (row.get("emotions") or row.get("–≠–º–æ—Ü–∏–∏") or "").strip(),
                "mantra": (row.get("mantra") or row.get("–ú–∞–Ω—Ç—Ä–∞") or "").strip(),
            })
            i += 1
    if not OILS:
        raise RuntimeError("CSV —Å –º–∞—Å–ª–∞–º–∏ –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å —Ñ–∞–π–ª –∏ –∫–æ–ª–æ–Ω–∫–∏.")
    print(f"Loaded oils: {len(OILS)}")

load_oils()

# ============== –ë–î (SQLite) ==============
conn = sqlite3.connect(DB_PATH, check_same_thread=False)
cur = conn.cursor()

cur.execute("""
CREATE TABLE IF NOT EXISTS daily_pick (
    user_id INTEGER NOT NULL,
    pick_date TEXT NOT NULL,
    oil_id INTEGER NOT NULL,
    PRIMARY KEY (user_id, pick_date)
)
""")
cur.execute("""
CREATE TABLE IF NOT EXISTS favorites (
    user_id INTEGER NOT NULL,
    oil_id INTEGER NOT NULL,
    added_at TEXT,
    PRIMARY KEY (user_id, oil_id)
)
""")
conn.commit()

def get_today():
    return date.today().isoformat()

def get_today_pick(user_id: int):
    cur.execute("SELECT oil_id FROM daily_pick WHERE user_id=? AND pick_date=?", (user_id, get_today()))
    row = cur.fetchone()
    return row[0] if row else None

def set_today_pick(user_id: int, oil_id: int):
    cur.execute("INSERT OR REPLACE INTO daily_pick (user_id, pick_date, oil_id) VALUES (?, ?, ?)",
                (user_id, get_today(), oil_id))
    conn.commit()

def add_favorite(user_id: int, oil_id: int):
    cur.execute("INSERT OR IGNORE INTO favorites (user_id, oil_id, added_at) VALUES (?, ?, datetime('now'))",
                (user_id, oil_id))
    conn.commit()

def remove_favorite(user_id: int, oil_id: int):
    cur.execute("DELETE FROM favorites WHERE user_id=? AND oil_id=?", (user_id, oil_id))
    conn.commit()

def list_favorites(user_id: int):
    cur.execute("SELECT oil_id FROM favorites WHERE user_id=? ORDER BY added_at DESC", (user_id,))
    return [row[0] for row in cur.fetchall()]

# ============== –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ==============
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_kb = ReplyKeyboardMarkup(resize_keyboard=True)
main_kb.add(KeyboardButton("‚ú® –ú–∞—Å–ª–æ –¥–Ω—è"))
main_kb.add(KeyboardButton("üì¶ –ú–æ–π –Ω–∞–±–æ—Ä"), KeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"))

# ======= –£—Ç–∏–ª–∏—Ç—ã —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è =======
def oil_text(o):
    parts = [f"üåø *{o['name']}*"]
    if o["emotions"]:
        parts.append(f"üåÄ *–≠–º–æ—Ü–∏–∏:* {o['emotions']}")
    if o["description"]:
        parts.append(f"üìñ *–°—É—Ç—å:* {o['description']}")
    if o["mantra"]:
        parts.append(f"üîÆ *–ú–∞–Ω—Ç—Ä–∞:* _{o['mantra']}_")
    return "\n".join(parts)

def oil_card_kb(oil_id: int):
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton("‚ûï –í –Ω–∞–±–æ—Ä", callback_data=f"fav_add:{oil_id}"),
        InlineKeyboardButton("‚ùå –£–±—Ä–∞—Ç—å", callback_data=f"fav_del:{oil_id}")
    )
    return kb

def consult_kb():
    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("WhatsApp", url=CONSULT_WHATSAPP_URL))
    kb.add(InlineKeyboardButton("Instagram", url=CONSULT_IG_URL))
    return kb

# ======= –ö–æ–º–∞–Ω–¥—ã =======
@dp.message_handler(commands=["start"])
async def cmd_start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç üåø –Ø —Ç–≤–æ–π Aroma-–±–æ—Ç.\n–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help.",
        reply_markup=main_kb
    )

@dp.message_handler(commands=["help"])
async def cmd_help(message: types.Message):
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω–æ:\n"
        "‚ú® –ú–∞—Å–ª–æ –¥–Ω—è ‚Äî –æ–¥–Ω–æ –º–∞—Å–ª–æ –≤ —Å—É—Ç–∫–∏\n"
        "üì¶ –ú–æ–π –Ω–∞–±–æ—Ä ‚Äî –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–µ—Å—è –º–∞—Å–ª–∞\n"
        "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è ‚Äî —Å–≤—è–∑—å —Å–æ –º–Ω–æ–π\n\n"
        "–ö–æ–º–∞–Ω–¥—ã: /oil, /myset, /consult",
        reply_markup=main_kb
    )

@dp.message_handler(commands=["consult"])
async def cmd_consult(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:", reply_markup=consult_kb())

@dp.message_handler(commands=["oil"])
async def cmd_oil(message: types.Message):
    await handle_oil_of_day(message)

@dp.message_handler(commands=["myset"])
async def cmd_myset(message: types.Message):
    await handle_myset(message)

# ======= –ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é =======
@dp.message_handler(lambda m: m.text == "‚ú® –ú–∞—Å–ª–æ –¥–Ω—è")
async def btn_oil_of_day(message: types.Message):
    await handle_oil_of_day(message)

@dp.message_handler(lambda m: m.text == "üì¶ –ú–æ–π –Ω–∞–±–æ—Ä")
async def btn_myset(message: types.Message):
    await handle_myset(message)

@dp.message_handler(lambda m: m.text == "üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è")
async def btn_consult(message: types.Message):
    await cmd_consult(message)

# ======= –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ =======
async def handle_oil_of_day(message: types.Message):
    user_id = message.from_user.id
    oil_id = get_today_pick(user_id)
    if oil_id is None:
        oil_id = random.randint(0, len(OILS) - 1)
        set_today_pick(user_id, oil_id)

    o = OILS[oil_id]
    await message.answer(oil_text(o), parse_mode="Markdown", reply_markup=oil_card_kb(oil_id))

async def handle_myset(message: types.Message):
    favs = list_favorites(message.from_user.id)
    if not favs:
        await message.answer("–¢–≤–æ–π –Ω–∞–±–æ—Ä –ø–æ–∫–∞ –ø—É—Å—Ç. –ù–∞–∂–º–∏ ¬´‚ú® –ú–∞—Å–ª–æ –¥–Ω—è¬ª –∏ –¥–æ–±–∞–≤—å –ø–æ–Ω—Ä–∞–≤–∏–≤—à–µ–µ—Å—è.")
        return

    text_lines = ["üì¶ *–¢–≤–æ–π –Ω–∞–±–æ—Ä:*"]
    for oid in favs:
        o = OILS[oid]
        text_lines.append(f"‚Ä¢ {o['name']}")

    kb = InlineKeyboardMarkup()
    kb.add(InlineKeyboardButton("üóë –û—á–∏—Å—Ç–∏—Ç—å –Ω–∞–±–æ—Ä", callback_data="fav_clear"))
    await message.answer("\n".join(text_lines), parse_mode="Markdown", reply_markup=kb)

# ======= Callback‚Äô–∏ =======
@dp.callback_query_handler(lambda c: c.data.startswith("fav_add:"))
async def cb_fav_add(c: types.CallbackQuery):
    oil_id = int(c.data.split(":")[1])
    add_favorite(c.from_user.id, oil_id)
    await c.answer("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –Ω–∞–±–æ—Ä")
    await c.message.edit_reply_markup(reply_markup=oil_card_kb(oil_id))

@dp.callback_query_handler(lambda c: c.data.startswith("fav_del:"))
async def cb_fav_del(c: types.CallbackQuery):
    oil_id = int(c.data.split(":")[1])
    remove_favorite(c.from_user.id, oil_id)
    await c.answer("–£–±—Ä–∞–Ω–æ –∏–∑ –Ω–∞–±–æ—Ä–∞")
    await c.message.edit_reply_markup(reply_markup=oil_card_kb(oil_id))

@dp.callback_query_handler(lambda c: c.data == "fav_clear")
async def cb_fav_clear(c: types.CallbackQuery):
    for oid in list_favorites(c.from_user.id):
        remove_favorite(c.from_user.id, oid)
    await c.answer("–ù–∞–±–æ—Ä –æ—á–∏—â–µ–Ω")
    await c.message.edit_text("–ù–∞–±–æ—Ä –æ—á–∏—â–µ–Ω. –î–æ–±–∞–≤—å –Ω–æ–≤—ã–µ –ª—é–±–∏–º—á–∏–∫–∏ —á–µ—Ä–µ–∑ ¬´‚ú® –ú–∞—Å–ª–æ –¥–Ω—è¬ª.")

# ======= –ó–∞–ø—É—Å–∫ =======
if __name__ == "__main__":
    print("Telegram bot starting...")
    executor.start_polling(dp, skip_updates=True)